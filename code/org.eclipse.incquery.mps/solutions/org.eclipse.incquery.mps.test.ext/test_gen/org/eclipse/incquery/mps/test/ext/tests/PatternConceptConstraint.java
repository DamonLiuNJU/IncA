package org.eclipse.incquery.mps.test.ext.tests;

/*Generated by MPS */

import org.eclipse.incquery.mps.runtime.BaseGeneratedPQuery;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.eclipse.incquery.runtime.matchers.psystem.queries.PParameter;
import java.util.Set;
import org.eclipse.incquery.runtime.matchers.psystem.PBody;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.eclipse.incquery.runtime.matchers.psystem.PVariable;
import org.eclipse.incquery.runtime.matchers.psystem.basicdeferred.ExportedParameter;
import org.eclipse.incquery.runtime.matchers.psystem.basicenumerables.TypeUnary;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.eclipse.incquery.runtime.matchers.psystem.queries.PDisjunction;

public class PatternConceptConstraint extends BaseGeneratedPQuery {


  public String getFullyQualifiedName() {
    return "a.b.c.conceptConstraint";
  }



  public List<String> getParameterNames() {
    return ListSequence.fromListAndArray(new ArrayList<String>(), "pattern");
  }



  public List<PParameter> getParameters() {
    return ListSequence.fromListAndArray(new ArrayList<PParameter>(), new PParameter("pattern", "Pattern"));
  }



  public Set<PBody> doGetContainedBodies() {
    Set<PBody> bodies = SetSequence.fromSet(new HashSet<PBody>());

    {
      PBody body = new PBody(this);
      PVariable var_pattern = body.getOrCreateVariableByName("pattern");

      List<ExportedParameter> exportedParameters = new ArrayList<ExportedParameter>();
      exportedParameters.add(new ExportedParameter(body, var_pattern, "pattern"));
      body.setExportedParameters(exportedParameters);

      new TypeUnary(body, var_pattern, SConceptOperations.findConceptDeclaration("org.eclipse.incquery.mps.structure.Pattern"), "org.eclipse.incquery.mps.structure.Pattern");
      SetSequence.fromSet(bodies).addElement(body);
    }
    return bodies;
  }



  public static PatternConceptConstraint instance() {
    return PatternConceptConstraint.LazyHolder.INSTANCE;
  }



  @SuppressWarnings("all")
  private static class LazyHolder {

    private static final PatternConceptConstraint INSTANCE = make();


    public static PatternConceptConstraint make() {
      return new PatternConceptConstraint();
    }


  }



  @Override
  public PDisjunction getDisjunctBodies() {
    return new PDisjunction(doGetContainedBodies());
  }
}
